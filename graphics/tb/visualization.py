import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

def read_simulation_data(filename):
    # Load the simulation data from the text file
    df = pd.read_csv(filename)

    # Extract the relevant columns
    time = df['Time']
    hsync = df['hsync']
    vsync = df['vsync']

    # Ensure 'rgb' column is treated correctly
    def parse_rgb(value):
        try:
            bits = [int(bit) for bit in value.strip() if bit in '01']
            return bits if len(bits) == 3 else [0, 0, 0]
        except ValueError:
            return [0, 0, 0]  # Default/fallback in case of error

    # Apply parsing to each row in the 'rgb' column
    rgb = df['rgb'].apply(parse_rgb)
    
    # Convert list of lists to a numpy array
    rgb_array = np.array(list(rgb))
    
    return time, hsync, vsync, rgb_array

def build_frames(rgb_data, frame_width=320, frame_height=240):
    # Calculate expected number of pixels per frame
    pixels_per_frame = frame_width * frame_height

    # Calculate how many complete frames we have
    num_complete_frames = len(rgb_data) // pixels_per_frame
    
    # Trim rgb_data to only include complete frames
    trimmed_rgb_data = rgb_data[:num_complete_frames * pixels_per_frame]
    
    # Reshape into frames
    frames = trimmed_rgb_data.reshape((num_complete_frames, frame_height, frame_width, 3))
    return frames

def show_frames(frames):
    fig, ax = plt.subplots()

    for i, frame in enumerate(frames):
        ax.clear()
        ax.imshow(frame, cmap='gray', interpolation='nearest', vmin=0, vmax=1)
        plt.title(f'Frame {i + 1}')
        plt.axis('off')
        plt.pause(0.1)

    plt.show()

def main():
    # Assume 'simulation_data.txt' is generated by the Verilog testbench
    time, hsync, vsync, rgb_data = read_simulation_data('simulation_data.txt')
    
    frames = build_frames(rgb_data)
    
    if len(frames) > 0:
        show_frames(frames)
    else:
        print("No complete frames found in the simulation data.")

if __name__ == '__main__':
    main()